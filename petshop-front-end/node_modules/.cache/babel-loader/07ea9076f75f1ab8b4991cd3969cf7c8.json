{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie'; // Crie uma instância do Axios com a base URL definida para o servidor onde sua API de pets está hospedada\n\nconst petsAPI = axios.create({\n  baseURL: 'http://localhost/'\n}); // Intercepte as requisições e adicione o token de autenticação no header, se necessário\n\npetsAPI.interceptors.request.use(config => {\n  const token = Cookies.get('token');\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return config;\n});\n/**\r\n * Obtém a lista de pets.\r\n * @returns {Promise<Array>} Uma promessa que é resolvida com a lista de pets.\r\n */\n\nasync function getPets() {\n  try {\n    const response = await petsAPI.get('/pet');\n    let pets;\n    pets = response.data.pets;\n    return pets;\n  } catch (error) {\n    console.error('Erro ao obter os pets:', error);\n    throw new Error('Erro ao obter os pets');\n  }\n}\n/**\r\n * Obtém os detalhes de um pet específico.\r\n * @param {number} id O ID do pet a ser obtido.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com os detalhes do pet.\r\n */\n\n\nasync function getPet(id) {\n  try {\n    const response = await petsAPI.get(`/pet/${id}`);\n    let pet;\n    pet = response.data;\n    return pet;\n  } catch (error) {\n    console.error(`Erro ao obter o pet com o ID ${id}:`, error);\n    throw new Error(`Erro ao obter o pet com o ID ${id}`);\n  }\n}\n/**\r\n * Cadastra um novo pet.\r\n * @param {Object} pet O objeto contendo os dados do pet a ser cadastrado.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com o novo pet cadastrado.\r\n */\n\n\nasync function postPet(pet) {\n  try {\n    const response = await petsAPI.post('/pet', pet);\n    let newPet;\n    newPet = response.data;\n    return newPet;\n  } catch (error) {\n    console.error('Erro ao cadastrar pet:', error);\n    throw new Error('Erro ao cadastrar pet');\n  }\n}\n/**\r\n * Atualiza um pet existente.\r\n * @param {number} id O ID do pet a ser atualizado.\r\n * @param {Object} pet O objeto contendo os novos dados do pet.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com o pet atualizado.\r\n */\n\n\nasync function patchPet(id, pet) {\n  try {\n    const response = await petsAPI.patch(`/pet/${id}`, pet);\n    let updatedPet;\n    updatedPet = response.data;\n    return updatedPet;\n  } catch (error) {\n    console.error(`Erro ao atualizar o pet com o ID ${id}:`, error);\n    throw new Error(`Erro ao atualizar o pet com o ID ${id}`);\n  }\n}\n/**\r\n * Exclui um pet.\r\n * @param {number} id O ID do pet a ser excluído.\r\n */\n\n\nasync function deletePet(id) {\n  try {\n    await petsAPI.delete(`/pet/${id}`);\n  } catch (error) {\n    console.error(`Erro ao excluir o pet com o ID ${id}:`, error);\n    throw new Error(`Erro ao excluir o pet com o ID ${id}`);\n  }\n}\n\nexport { getPets, getPet, postPet, patchPet, deletePet };","map":{"version":3,"names":["axios","Cookies","petsAPI","create","baseURL","interceptors","request","use","config","token","get","headers","Authorization","getPets","response","pets","data","error","console","Error","getPet","id","pet","postPet","post","newPet","patchPet","patch","updatedPet","deletePet","delete"],"sources":["/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/services/pets.js"],"sourcesContent":["import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\n// Crie uma instância do Axios com a base URL definida para o servidor onde sua API de pets está hospedada\r\nconst petsAPI = axios.create({ baseURL: 'http://localhost/' });\r\n\r\n// Intercepte as requisições e adicione o token de autenticação no header, se necessário\r\npetsAPI.interceptors.request.use((config) => {\r\n    const token = Cookies.get('token');\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\n/**\r\n * Obtém a lista de pets.\r\n * @returns {Promise<Array>} Uma promessa que é resolvida com a lista de pets.\r\n */\r\nasync function getPets() {\r\n    try {\r\n        const response = await petsAPI.get('/pet');\r\n        let pets;\r\n        pets = response.data.pets;\r\n        return pets;\r\n    } catch (error) {\r\n        console.error('Erro ao obter os pets:', error);\r\n        throw new Error('Erro ao obter os pets');\r\n    }\r\n}\r\n\r\n/**\r\n * Obtém os detalhes de um pet específico.\r\n * @param {number} id O ID do pet a ser obtido.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com os detalhes do pet.\r\n */\r\nasync function getPet(id) {\r\n    try {\r\n        const response = await petsAPI.get(`/pet/${id}`);\r\n        let pet;\r\n        pet = response.data;\r\n        return pet;\r\n    } catch (error) {\r\n        console.error(`Erro ao obter o pet com o ID ${id}:`, error);\r\n        throw new Error(`Erro ao obter o pet com o ID ${id}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Cadastra um novo pet.\r\n * @param {Object} pet O objeto contendo os dados do pet a ser cadastrado.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com o novo pet cadastrado.\r\n */\r\nasync function postPet(pet) {\r\n    try {\r\n        const response = await petsAPI.post('/pet', pet);\r\n        let newPet;\r\n        newPet = response.data;\r\n        return newPet;\r\n    } catch (error) {\r\n        console.error('Erro ao cadastrar pet:', error);\r\n        throw new Error('Erro ao cadastrar pet');\r\n    }\r\n}\r\n\r\n/**\r\n * Atualiza um pet existente.\r\n * @param {number} id O ID do pet a ser atualizado.\r\n * @param {Object} pet O objeto contendo os novos dados do pet.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com o pet atualizado.\r\n */\r\nasync function patchPet(id, pet) {\r\n    try {\r\n        const response = await petsAPI.patch(`/pet/${id}`, pet);\r\n        let updatedPet;\r\n        updatedPet = response.data;\r\n        return updatedPet;\r\n    } catch (error) {\r\n        console.error(`Erro ao atualizar o pet com o ID ${id}:`, error);\r\n        throw new Error(`Erro ao atualizar o pet com o ID ${id}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Exclui um pet.\r\n * @param {number} id O ID do pet a ser excluído.\r\n */\r\nasync function deletePet(id) {\r\n    try {\r\n        await petsAPI.delete(`/pet/${id}`);\r\n    } catch (error) {\r\n        console.error(`Erro ao excluir o pet com o ID ${id}:`, error);\r\n        throw new Error(`Erro ao excluir o pet com o ID ${id}`);\r\n    }\r\n}\r\n\r\nexport { getPets, getPet, postPet, patchPet, deletePet };"],"mappings":"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"},"metadata":{},"sourceType":"module"}