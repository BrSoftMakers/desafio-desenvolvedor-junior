{"ast":null,"code":"var _jsxFileName = \"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/cadastroAnimal/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { AppContainer, Header, FormContainer } from \"../../components/CadastroForm/index\";\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { useNavigate } from \"react-router-dom\";\nimport { postPet } from \"../../services/pets\"; // Importe a função apropriada para cadastrar animais\n\nimport { getUsers } from \"../../services/user\"; // Importe a função para obter a lista de usuários\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CadastroAnimal() {\n  _s();\n\n  const navigate = useNavigate();\n  const [message, setMessage] = useState(\"\");\n  const [users, setUsers] = useState([]); // Estado para armazenar a lista de usuários\n\n  const [selectedUserId, setSelectedUserId] = useState(\"\"); // Estado para armazenar o ID do usuário selecionado\n\n  useEffect(() => {\n    // Use useEffect para obter a lista de usuários quando o componente for montado\n    async function fetchUsers() {\n      try {\n        const userList = await getUsers();\n        setUsers(userList);\n      } catch (error) {\n        console.error(\"Erro ao obter a lista de usuários:\", error);\n      }\n    }\n\n    fetchUsers();\n  }, []); // O array vazio [] garante que esta função seja chamada apenas uma vez no início\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      // Nome do animal\n      age: '',\n      // Idade do animal\n      type: '',\n      // Tipo do animal (ex: dog, cat)\n      breed: '',\n      // Raça do animal\n      ownerId: '' // ID do responsável (dono) do animal\n\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().required('Obrigatório'),\n      age: Yup.number().required('Obrigatório'),\n      type: Yup.string().required('Obrigatório'),\n      breed: Yup.string().required('Obrigatório'),\n      ownerId: Yup.number().required('Obrigatório')\n    }),\n    onSubmit: async values => {\n      try {\n        const animalData = {\n          name: values.name,\n          age: values.age,\n          type: values.type,\n          breed: values.breed,\n          ownerId: selectedUserId // Defina o ownerId como o ID do usuário selecionado\n\n        };\n        const response = await postPet(animalData);\n\n        if (response.success) {\n          setMessage(response.message);\n          navigate('/outrapagina');\n        } else {\n          setMessage(response.message);\n        }\n      } catch (error) {\n        console.error(\"Erro ao cadastrar animal:\", error);\n        setMessage(\"Erro ao cadastrar animal. Por favor, tente novamente.\");\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative ml-[195px] -mt-[650px]\",\n    children: /*#__PURE__*/_jsxDEV(AppContainer, {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(FormContainer, {\n        className: \"mt-16 flex ml-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex text-#0588D1\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: formik.handleSubmit,\n            className: \"\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"gap-10\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"ownerId\",\n                className: \"block text-sm font-medium\",\n                children: \"ID do dono\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                defaultValue: \"DEFAULT\",\n                id: \"ownerId\",\n                name: \"ownerId\",\n                ...formik.getFieldProps('ownerId'),\n                value: selectedUserId,\n                onChange: e => setSelectedUserId(e.target.value) // Atualize o ID do usuário selecionado\n                ,\n                className: \"w-48 px-3 py-2 border border-gray-300 rounded-xl  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"DEFAULT\",\n                  hidden: true,\n                  children: \"Selecionar\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 37\n                }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: user.id,\n                  children: user.name\n                }, user.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 41\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this), formik.touched.ownerId && formik.errors.ownerId ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm\",\n                children: formik.errors.ownerId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 37\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CadastroAnimal, \"emQ/H9wt99wNKyL46MJy6z/Ygi0=\", false, function () {\n  return [useNavigate, useFormik];\n});\n\n_c = CadastroAnimal;\nexport default CadastroAnimal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CadastroAnimal\");","map":{"version":3,"names":["React","useState","useEffect","AppContainer","Header","FormContainer","useFormik","Yup","useNavigate","postPet","getUsers","CadastroAnimal","navigate","message","setMessage","users","setUsers","selectedUserId","setSelectedUserId","fetchUsers","userList","error","console","formik","initialValues","name","age","type","breed","ownerId","validationSchema","object","string","required","number","onSubmit","values","animalData","response","success","handleSubmit","getFieldProps","e","target","value","map","user","id","touched","errors"],"sources":["/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/cadastroAnimal/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { AppContainer, Header, FormContainer } from \"../../components/CadastroForm/index\";\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { postPet } from \"../../services/pets\"; // Importe a função apropriada para cadastrar animais\r\nimport { getUsers } from \"../../services/user\"; // Importe a função para obter a lista de usuários\r\n\r\nfunction CadastroAnimal() {\r\n    const navigate = useNavigate();\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n    const [users, setUsers] = useState([]); // Estado para armazenar a lista de usuários\r\n    const [selectedUserId, setSelectedUserId] = useState(\"\"); // Estado para armazenar o ID do usuário selecionado\r\n\r\n    useEffect(() => {\r\n        // Use useEffect para obter a lista de usuários quando o componente for montado\r\n        async function fetchUsers() {\r\n            try {\r\n                const userList = await getUsers();\r\n                setUsers(userList);\r\n            } catch (error) {\r\n                console.error(\"Erro ao obter a lista de usuários:\", error);\r\n            }\r\n        }\r\n\r\n        fetchUsers();\r\n    }, []); // O array vazio [] garante que esta função seja chamada apenas uma vez no início\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '', // Nome do animal\r\n            age: '', // Idade do animal\r\n            type: '', // Tipo do animal (ex: dog, cat)\r\n            breed: '', // Raça do animal\r\n            ownerId: '', // ID do responsável (dono) do animal\r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string().required('Obrigatório'),\r\n            age: Yup.number().required('Obrigatório'),\r\n            type: Yup.string().required('Obrigatório'),\r\n            breed: Yup.string().required('Obrigatório'),\r\n            ownerId: Yup.number().required('Obrigatório'),\r\n        }),\r\n\r\n        onSubmit: async (values) => {\r\n            try {\r\n                const animalData = {\r\n                    name: values.name,\r\n                    age: values.age,\r\n                    type: values.type,\r\n                    breed: values.breed,\r\n                    ownerId: selectedUserId, // Defina o ownerId como o ID do usuário selecionado\r\n                };\r\n\r\n                const response = await postPet(animalData);\r\n\r\n                if (response.success) {\r\n                    setMessage(response.message);\r\n                    navigate('/outrapagina');\r\n                } else {\r\n                    setMessage(response.message);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Erro ao cadastrar animal:\", error);\r\n                setMessage(\"Erro ao cadastrar animal. Por favor, tente novamente.\");\r\n            }\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div className=\"relative ml-[195px] -mt-[650px]\">\r\n            <AppContainer className=\"\">\r\n                <FormContainer className=\"mt-16 flex ml-12\">\r\n                    <div className=\"flex text-#0588D1\">\r\n                        <form onSubmit={formik.handleSubmit} className=\"\">\r\n                            {/* Resto do seu formulário permanece o mesmo */}\r\n                            {/* Adicione o <select> para selecionar o usuário */}\r\n                            <div className=\"gap-10\">\r\n                                <label htmlFor=\"ownerId\" className=\"block text-sm font-medium\">\r\n                                    ID do dono\r\n                                </label>\r\n                                <select\r\n                                    defaultValue=\"DEFAULT\"\r\n                                    id=\"ownerId\"\r\n                                    name=\"ownerId\"\r\n                                    {...formik.getFieldProps('ownerId')}\r\n                                    value={selectedUserId}\r\n                                    onChange={(e) => setSelectedUserId(e.target.value)} // Atualize o ID do usuário selecionado\r\n                                    className=\"w-48 px-3 py-2 border border-gray-300 rounded-xl  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                >\r\n                                    <option value=\"DEFAULT\" hidden>Selecionar</option>\r\n                                    {/* Preencha as opções do select com a lista de usuários */}\r\n                                    {users.map((user) => (\r\n                                        <option key={user.id} value={user.id}>\r\n                                            {user.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n\r\n                                {formik.touched.ownerId && formik.errors.ownerId ? (\r\n                                    <div className=\"text-sm\">{formik.errors.ownerId}</div>\r\n                                ) : null}\r\n                            </div>\r\n                            {/* Resto do seu código permanece o mesmo */}\r\n                        </form>\r\n                    </div>\r\n                </FormContainer>\r\n            </AppContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CadastroAnimal;"],"mappings":"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"},"metadata":{},"sourceType":"module"}