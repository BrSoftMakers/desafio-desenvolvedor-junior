{"ast":null,"code":"import MaskElement from './mask-element.js';\nimport IMask from '../core/holder.js';\n/** Bridge between HTMLElement and {@link Masked} */\n\nclass HTMLMaskElement extends MaskElement {\n  /** HTMLElement to use mask on */\n  constructor(input) {\n    super();\n    this.input = input;\n    this._handlers = {};\n  }\n\n  get rootElement() {\n    var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\n\n    return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) == null ? void 0 : _this$input$getRootNo2.call(_this$input)) != null ? _this$input$getRootNo : document;\n  }\n  /**\n    Is element in focus\n  */\n\n\n  get isActive() {\n    return this.input === this.rootElement.activeElement;\n  }\n  /**\n    Binds HTMLElement events to mask internal events\n  */\n\n\n  bindEvents(handlers) {\n    Object.keys(handlers).forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\n  }\n  /**\n    Unbinds HTMLElement events to mask internal events\n  */\n\n\n  unbindEvents() {\n    Object.keys(this._handlers).forEach(event => this._toggleEventHandler(event));\n  }\n\n  _toggleEventHandler(event, handler) {\n    if (this._handlers[event]) {\n      this.input.removeEventListener(event, this._handlers[event]);\n      delete this._handlers[event];\n    }\n\n    if (handler) {\n      this.input.addEventListener(event, handler);\n      this._handlers[event] = handler;\n    }\n  }\n\n}\n/** Mapping between HTMLElement events and mask internal events */\n\n\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\nIMask.HTMLMaskElement = HTMLMaskElement;\nexport { HTMLMaskElement as default };","map":{"version":3,"names":["MaskElement","IMask","HTMLMaskElement","constructor","input","_handlers","rootElement","_this$input$getRootNo","_this$input$getRootNo2","_this$input","getRootNode","call","document","isActive","activeElement","bindEvents","handlers","Object","keys","forEach","event","_toggleEventHandler","EVENTS_MAP","unbindEvents","handler","removeEventListener","addEventListener","selectionChange","drop","click","focus","commit","default"],"sources":["/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/node_modules/imask/esm/controls/html-mask-element.js"],"sourcesContent":["import MaskElement from './mask-element.js';\nimport IMask from '../core/holder.js';\n\n/** Bridge between HTMLElement and {@link Masked} */\nclass HTMLMaskElement extends MaskElement {\n  /** HTMLElement to use mask on */\n\n  constructor(input) {\n    super();\n    this.input = input;\n    this._handlers = {};\n  }\n  get rootElement() {\n    var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\n    return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) == null ? void 0 : _this$input$getRootNo2.call(_this$input)) != null ? _this$input$getRootNo : document;\n  }\n\n  /**\n    Is element in focus\n  */\n  get isActive() {\n    return this.input === this.rootElement.activeElement;\n  }\n\n  /**\n    Binds HTMLElement events to mask internal events\n  */\n  bindEvents(handlers) {\n    Object.keys(handlers).forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\n  }\n\n  /**\n    Unbinds HTMLElement events to mask internal events\n  */\n  unbindEvents() {\n    Object.keys(this._handlers).forEach(event => this._toggleEventHandler(event));\n  }\n  _toggleEventHandler(event, handler) {\n    if (this._handlers[event]) {\n      this.input.removeEventListener(event, this._handlers[event]);\n      delete this._handlers[event];\n    }\n    if (handler) {\n      this.input.addEventListener(event, handler);\n      this._handlers[event] = handler;\n    }\n  }\n}\n/** Mapping between HTMLElement events and mask internal events */\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\nIMask.HTMLMaskElement = HTMLMaskElement;\n\nexport { HTMLMaskElement as default };\n"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA;;AACA,MAAMC,eAAN,SAA8BF,WAA9B,CAA0C;EACxC;EAEAG,WAAW,CAACC,KAAD,EAAQ;IACjB;IACA,KAAKA,KAAL,GAAaA,KAAb;IACA,KAAKC,SAAL,GAAiB,EAAjB;EACD;;EACc,IAAXC,WAAW,GAAG;IAChB,IAAIC,qBAAJ,EAA2BC,sBAA3B,EAAmDC,WAAnD;;IACA,OAAO,CAACF,qBAAqB,GAAG,CAACC,sBAAsB,GAAG,CAACC,WAAW,GAAG,KAAKL,KAApB,EAA2BM,WAArD,KAAqE,IAArE,GAA4E,KAAK,CAAjF,GAAqFF,sBAAsB,CAACG,IAAvB,CAA4BF,WAA5B,CAA9G,KAA2J,IAA3J,GAAkKF,qBAAlK,GAA0LK,QAAjM;EACD;EAED;AACF;AACA;;;EACc,IAARC,QAAQ,GAAG;IACb,OAAO,KAAKT,KAAL,KAAe,KAAKE,WAAL,CAAiBQ,aAAvC;EACD;EAED;AACF;AACA;;;EACEC,UAAU,CAACC,QAAD,EAAW;IACnBC,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,OAAtB,CAA8BC,KAAK,IAAI,KAAKC,mBAAL,CAAyBnB,eAAe,CAACoB,UAAhB,CAA2BF,KAA3B,CAAzB,EAA4DJ,QAAQ,CAACI,KAAD,CAApE,CAAvC;EACD;EAED;AACF;AACA;;;EACEG,YAAY,GAAG;IACbN,MAAM,CAACC,IAAP,CAAY,KAAKb,SAAjB,EAA4Bc,OAA5B,CAAoCC,KAAK,IAAI,KAAKC,mBAAL,CAAyBD,KAAzB,CAA7C;EACD;;EACDC,mBAAmB,CAACD,KAAD,EAAQI,OAAR,EAAiB;IAClC,IAAI,KAAKnB,SAAL,CAAee,KAAf,CAAJ,EAA2B;MACzB,KAAKhB,KAAL,CAAWqB,mBAAX,CAA+BL,KAA/B,EAAsC,KAAKf,SAAL,CAAee,KAAf,CAAtC;MACA,OAAO,KAAKf,SAAL,CAAee,KAAf,CAAP;IACD;;IACD,IAAII,OAAJ,EAAa;MACX,KAAKpB,KAAL,CAAWsB,gBAAX,CAA4BN,KAA5B,EAAmCI,OAAnC;MACA,KAAKnB,SAAL,CAAee,KAAf,IAAwBI,OAAxB;IACD;EACF;;AA1CuC;AA4C1C;;;AACAtB,eAAe,CAACoB,UAAhB,GAA6B;EAC3BK,eAAe,EAAE,SADU;EAE3BvB,KAAK,EAAE,OAFoB;EAG3BwB,IAAI,EAAE,MAHqB;EAI3BC,KAAK,EAAE,OAJoB;EAK3BC,KAAK,EAAE,OALoB;EAM3BC,MAAM,EAAE;AANmB,CAA7B;AAQA9B,KAAK,CAACC,eAAN,GAAwBA,eAAxB;AAEA,SAASA,eAAe,IAAI8B,OAA5B"},"metadata":{},"sourceType":"module"}