{"ast":null,"code":"import { DIRECTION } from './utils.js';\n/** Provides details of changing input */\n\nclass ActionDetails {\n  /** Current input value */\n\n  /** Current cursor position */\n\n  /** Old input value */\n\n  /** Old selection */\n  constructor(opts) {\n    Object.assign(this, opts); // double check if left part was changed (autofilling, other non-standard input triggers)\n\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n  /** Start changing position */\n\n\n  get startChangePos() {\n    return Math.min(this.cursorPos, this.oldSelection.start);\n  }\n  /** Inserted symbols count */\n\n\n  get insertedCount() {\n    return this.cursorPos - this.startChangePos;\n  }\n  /** Inserted symbols */\n\n\n  get inserted() {\n    return this.value.substr(this.startChangePos, this.insertedCount);\n  }\n  /** Removed symbols count */\n\n\n  get removedCount() {\n    // Math.max for opposite operation\n    return Math.max(this.oldSelection.end - this.startChangePos || // for Delete\n    this.oldValue.length - this.value.length, 0);\n  }\n  /** Removed symbols */\n\n\n  get removed() {\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\n  }\n  /** Unchanged head symbols */\n\n\n  get head() {\n    return this.value.substring(0, this.startChangePos);\n  }\n  /** Unchanged tail symbols */\n\n\n  get tail() {\n    return this.value.substring(this.startChangePos + this.insertedCount);\n  }\n  /** Remove direction */\n\n\n  get removeDirection() {\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE; // align right if delete at right\n\n    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) && // if not range removed (event with backspace)\n    this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;\n  }\n\n}\n\nexport { ActionDetails as default };","map":{"version":3,"names":["DIRECTION","ActionDetails","constructor","opts","Object","assign","value","slice","startChangePos","oldValue","oldSelection","start","Math","min","cursorPos","insertedCount","inserted","substr","removedCount","max","end","length","removed","head","substring","tail","removeDirection","NONE","RIGHT","LEFT","default"],"sources":["C:/Users/lucas/OneDrive/√Årea de Trabalho/petshop-front-end/node_modules/imask/esm/core/action-details.js"],"sourcesContent":["import { DIRECTION } from './utils.js';\n\n/** Provides details of changing input */\nclass ActionDetails {\n  /** Current input value */\n\n  /** Current cursor position */\n\n  /** Old input value */\n\n  /** Old selection */\n\n  constructor(opts) {\n    Object.assign(this, opts);\n\n    // double check if left part was changed (autofilling, other non-standard input triggers)\n    while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {\n      --this.oldSelection.start;\n    }\n  }\n\n  /** Start changing position */\n  get startChangePos() {\n    return Math.min(this.cursorPos, this.oldSelection.start);\n  }\n\n  /** Inserted symbols count */\n  get insertedCount() {\n    return this.cursorPos - this.startChangePos;\n  }\n\n  /** Inserted symbols */\n  get inserted() {\n    return this.value.substr(this.startChangePos, this.insertedCount);\n  }\n\n  /** Removed symbols count */\n  get removedCount() {\n    // Math.max for opposite operation\n    return Math.max(this.oldSelection.end - this.startChangePos ||\n    // for Delete\n    this.oldValue.length - this.value.length, 0);\n  }\n\n  /** Removed symbols */\n  get removed() {\n    return this.oldValue.substr(this.startChangePos, this.removedCount);\n  }\n\n  /** Unchanged head symbols */\n  get head() {\n    return this.value.substring(0, this.startChangePos);\n  }\n\n  /** Unchanged tail symbols */\n  get tail() {\n    return this.value.substring(this.startChangePos + this.insertedCount);\n  }\n\n  /** Remove direction */\n  get removeDirection() {\n    if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;\n\n    // align right if delete at right\n    return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&\n    // if not range removed (event with backspace)\n    this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;\n  }\n}\n\nexport { ActionDetails as default };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AAEA;;AACA,MAAMC,aAAN,CAAoB;EAClB;;EAEA;;EAEA;;EAEA;EAEAC,WAAW,CAACC,IAAD,EAAO;IAChBC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,IAApB,EADgB,CAGhB;;IACA,OAAO,KAAKG,KAAL,CAAWC,KAAX,CAAiB,CAAjB,EAAoB,KAAKC,cAAzB,MAA6C,KAAKC,QAAL,CAAcF,KAAd,CAAoB,CAApB,EAAuB,KAAKC,cAA5B,CAApD,EAAiG;MAC/F,EAAE,KAAKE,YAAL,CAAkBC,KAApB;IACD;EACF;EAED;;;EACkB,IAAdH,cAAc,GAAG;IACnB,OAAOI,IAAI,CAACC,GAAL,CAAS,KAAKC,SAAd,EAAyB,KAAKJ,YAAL,CAAkBC,KAA3C,CAAP;EACD;EAED;;;EACiB,IAAbI,aAAa,GAAG;IAClB,OAAO,KAAKD,SAAL,GAAiB,KAAKN,cAA7B;EACD;EAED;;;EACY,IAARQ,QAAQ,GAAG;IACb,OAAO,KAAKV,KAAL,CAAWW,MAAX,CAAkB,KAAKT,cAAvB,EAAuC,KAAKO,aAA5C,CAAP;EACD;EAED;;;EACgB,IAAZG,YAAY,GAAG;IACjB;IACA,OAAON,IAAI,CAACO,GAAL,CAAS,KAAKT,YAAL,CAAkBU,GAAlB,GAAwB,KAAKZ,cAA7B,IAChB;IACA,KAAKC,QAAL,CAAcY,MAAd,GAAuB,KAAKf,KAAL,CAAWe,MAF3B,EAEmC,CAFnC,CAAP;EAGD;EAED;;;EACW,IAAPC,OAAO,GAAG;IACZ,OAAO,KAAKb,QAAL,CAAcQ,MAAd,CAAqB,KAAKT,cAA1B,EAA0C,KAAKU,YAA/C,CAAP;EACD;EAED;;;EACQ,IAAJK,IAAI,GAAG;IACT,OAAO,KAAKjB,KAAL,CAAWkB,SAAX,CAAqB,CAArB,EAAwB,KAAKhB,cAA7B,CAAP;EACD;EAED;;;EACQ,IAAJiB,IAAI,GAAG;IACT,OAAO,KAAKnB,KAAL,CAAWkB,SAAX,CAAqB,KAAKhB,cAAL,GAAsB,KAAKO,aAAhD,CAAP;EACD;EAED;;;EACmB,IAAfW,eAAe,GAAG;IACpB,IAAI,CAAC,KAAKR,YAAN,IAAsB,KAAKH,aAA/B,EAA8C,OAAOf,SAAS,CAAC2B,IAAjB,CAD1B,CAGpB;;IACA,OAAO,CAAC,KAAKjB,YAAL,CAAkBU,GAAlB,KAA0B,KAAKN,SAA/B,IAA4C,KAAKJ,YAAL,CAAkBC,KAAlB,KAA4B,KAAKG,SAA9E,KACP;IACA,KAAKJ,YAAL,CAAkBU,GAAlB,KAA0B,KAAKV,YAAL,CAAkBC,KAFrC,GAE6CX,SAAS,CAAC4B,KAFvD,GAE+D5B,SAAS,CAAC6B,IAFhF;EAGD;;AAhEiB;;AAmEpB,SAAS5B,aAAa,IAAI6B,OAA1B"},"metadata":{},"sourceType":"module"}