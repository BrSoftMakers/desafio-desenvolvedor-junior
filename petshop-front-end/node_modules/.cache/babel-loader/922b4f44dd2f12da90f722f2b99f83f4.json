{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie'; // Cria uma instância do Axios com a base URL definida para 'http://localhost'\n\nconst usersAPI = axios.create({\n  baseURL: 'http://54.90.79.152/'\n}); // Intercepta as requisições e adiciona o token de autenticação no header\n\nusersAPI.interceptors.request.use(config => {\n  const token = Cookies.get('token');\n  config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\n/**\r\n * Obtém a lista de usuários.\r\n * @returns {Promise<Array>} Uma promessa que é resolvida com a lista de usuários.\r\n */\n\nasync function getUsers() {\n  try {\n    const response = await usersAPI.get('/user');\n    let dataUser;\n    dataUser = response.data.dataUser;\n    return dataUser;\n  } catch (error) {\n    console.error('Erro ao obter os usuários:', error);\n    throw new Error('Erro ao obter os usuários');\n  }\n}\n/**\r\n * Obtém os detalhes de um usuário específico.\r\n * @param {number} id O ID do usuário a ser obtido.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com os detalhes do usuário.\r\n */\n\n\nasync function getUser(id) {\n  try {\n    const response = await usersAPI.get(`/user/${id}`);\n    let user;\n    user = response.data;\n    return user;\n  } catch (error) {\n    console.error(`Erro ao obter o usuário com o ID ${id}:`, error);\n    throw new Error(`Erro ao obter o usuário com o ID ${id}`);\n  }\n}\n/**\r\n * Cadastra um novo usuário.\r\n * @param {Object} user O objeto contendo os dados do usuário a ser cadastrado.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com o novo usuário cadastrado.\r\n */\n\n\nasync function postUsers(user) {\n  try {\n    const response = await usersAPI.post('/user', user);\n    let newUser;\n    newUser = response.data;\n    return newUser;\n  } catch (error) {\n    console.error('Erro ao cadastrar usuário:', error);\n    throw new Error('Erro ao cadastrar usuário');\n  }\n}\n/**\r\n * Atualiza um usuário existente.\r\n * @param {number} id O ID do usuário a ser atualizado.\r\n * @param {Object} user O objeto contendo os novos dados do usuário.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com o usuário atualizado.\r\n */\n\n\nasync function patchUsers(id, user) {\n  try {\n    const response = await usersAPI.patch(`/user/${id}`, user);\n    let updatedUser;\n    updatedUser = response.data;\n    return updatedUser;\n  } catch (error) {\n    console.error(`Erro ao atualizar o usuário com o ID ${id}:`, error);\n    throw new Error(`Erro ao atualizar o usuário com o ID ${id}`);\n  }\n}\n/**\r\n * Exclui um usuário.\r\n * @param {number} id O ID do usuário a ser excluído.\r\n */\n\n\nasync function deleteUser(id) {\n  try {\n    await usersAPI.delete(`/user/${id}`);\n  } catch (error) {\n    console.error(`Erro ao excluir o usuário com o ID ${id}:`, error);\n    throw new Error(`Erro ao excluir o usuário com o ID ${id}`);\n  }\n}\n\nexport { getUsers, getUser, postUsers, patchUsers, deleteUser };","map":{"version":3,"names":["axios","Cookies","usersAPI","create","baseURL","interceptors","request","use","config","token","get","headers","Authorization","getUsers","response","dataUser","data","error","console","Error","getUser","id","user","postUsers","post","newUser","patchUsers","patch","updatedUser","deleteUser","delete"],"sources":["/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/services/user.js"],"sourcesContent":["import axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\n\r\n// Cria uma instância do Axios com a base URL definida para 'http://localhost'\r\nconst usersAPI = axios.create({ baseURL: 'http://54.90.79.152/' });\r\n\r\n// Intercepta as requisições e adiciona o token de autenticação no header\r\nusersAPI.interceptors.request.use((config) => {\r\n    const token = Cookies.get('token');\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n});\r\n\r\n/**\r\n * Obtém a lista de usuários.\r\n * @returns {Promise<Array>} Uma promessa que é resolvida com a lista de usuários.\r\n */\r\nasync function getUsers() {\r\n    try {\r\n        const response = await usersAPI.get('/user');\r\n        let dataUser;\r\n        dataUser = response.data.dataUser;\r\n        return dataUser;\r\n    } catch (error) {\r\n        console.error('Erro ao obter os usuários:', error);\r\n        throw new Error('Erro ao obter os usuários');\r\n    }\r\n}\r\n\r\n/**\r\n * Obtém os detalhes de um usuário específico.\r\n * @param {number} id O ID do usuário a ser obtido.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com os detalhes do usuário.\r\n */\r\nasync function getUser(id) {\r\n    try {\r\n        const response = await usersAPI.get(`/user/${id}`);\r\n        let user;\r\n        user = response.data;\r\n        return user;\r\n    } catch (error) {\r\n        console.error(`Erro ao obter o usuário com o ID ${id}:`, error);\r\n        throw new Error(`Erro ao obter o usuário com o ID ${id}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Cadastra um novo usuário.\r\n * @param {Object} user O objeto contendo os dados do usuário a ser cadastrado.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com o novo usuário cadastrado.\r\n */\r\nasync function postUsers(user) {\r\n    try {\r\n        const response = await usersAPI.post('/user', user);\r\n        let newUser;\r\n        newUser = response.data;\r\n        return newUser;\r\n    } catch (error) {\r\n        console.error('Erro ao cadastrar usuário:', error);\r\n        throw new Error('Erro ao cadastrar usuário');\r\n    }\r\n}\r\n\r\n/**\r\n * Atualiza um usuário existente.\r\n * @param {number} id O ID do usuário a ser atualizado.\r\n * @param {Object} user O objeto contendo os novos dados do usuário.\r\n * @returns {Promise<Object>} Uma promessa que é resolvida com o usuário atualizado.\r\n */\r\nasync function patchUsers(id, user) {\r\n    try {\r\n        const response = await usersAPI.patch(`/user/${id}`, user);\r\n        let updatedUser;\r\n        updatedUser = response.data;\r\n        return updatedUser;\r\n    } catch (error) {\r\n        console.error(`Erro ao atualizar o usuário com o ID ${id}:`, error);\r\n        throw new Error(`Erro ao atualizar o usuário com o ID ${id}`);\r\n    }\r\n}\r\n\r\n/**\r\n * Exclui um usuário.\r\n * @param {number} id O ID do usuário a ser excluído.\r\n */\r\nasync function deleteUser(id) {\r\n    try {\r\n        await usersAPI.delete(`/user/${id}`);\r\n    } catch (error) {\r\n        console.error(`Erro ao excluir o usuário com o ID ${id}:`, error);\r\n        throw new Error(`Erro ao excluir o usuário com o ID ${id}`);\r\n    }\r\n}\r\n\r\nexport { getUsers, getUser, postUsers, patchUsers, deleteUser };"],"mappings":"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"},"metadata":{},"sourceType":"module"}