{"ast":null,"code":"import IMask from '../core/holder.js';\nimport MaskedPattern from './pattern.js';\nimport '../core/change-details.js';\nimport '../core/utils.js';\nimport './base.js';\nimport '../core/continuous-tail-details.js';\nimport './factory.js';\nimport './pattern/chunk-tail-details.js';\nimport './pattern/cursor.js';\nimport './pattern/fixed-definition.js';\nimport './pattern/input-definition.js';\nimport './regexp.js';\n/** Pattern which accepts ranges */\n\nclass MaskedRange extends MaskedPattern {\n  /**\n    Optionally sets max length of pattern.\n    Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\n  */\n\n  /** Min bound */\n\n  /** Max bound */\n\n  /** */\n  get _matchFrom() {\n    return this.maxLength - String(this.from).length;\n  }\n\n  constructor(opts) {\n    super(opts); // mask will be created in _update\n  }\n\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n\n  _update(opts) {\n    const {\n      to = this.to || 0,\n      from = this.from || 0,\n      maxLength = this.maxLength || 0,\n      autofix = this.autofix,\n      ...patternOpts\n    } = opts;\n    this.to = to;\n    this.from = from;\n    this.maxLength = Math.max(String(to).length, maxLength);\n    this.autofix = autofix;\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n    let sameCharsCount = 0;\n\n    while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) ++sameCharsCount;\n\n    patternOpts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(this.maxLength - sameCharsCount);\n\n    super._update(patternOpts);\n  }\n\n  get isComplete() {\n    return super.isComplete && Boolean(this.value);\n  }\n\n  boundaries(str) {\n    let minstr = '';\n    let maxstr = '';\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/) || [];\n\n    if (num) {\n      minstr = '0'.repeat(placeholder.length) + num;\n      maxstr = '9'.repeat(placeholder.length) + num;\n    }\n\n    minstr = minstr.padEnd(this.maxLength, '0');\n    maxstr = maxstr.padEnd(this.maxLength, '9');\n    return [minstr, maxstr];\n  }\n\n  doPrepareChar(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n\n    let details;\n    [ch, details] = super.doPrepareChar(ch.replace(/\\D/g, ''), flags);\n    if (!this.autofix || !ch) return [ch, details];\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n    const nextVal = this.value + ch;\n    if (nextVal.length > this.maxLength) return ['', details];\n    const [minstr, maxstr] = this.boundaries(nextVal);\n    if (Number(maxstr) < this.from) return [fromStr[nextVal.length - 1], details];\n\n    if (Number(minstr) > this.to) {\n      if (this.autofix === 'pad' && nextVal.length < this.maxLength) {\n        return ['', details.aggregate(this.append(fromStr[nextVal.length - 1] + ch, flags))];\n      }\n\n      return [toStr[nextVal.length - 1], details];\n    }\n\n    return [ch, details];\n  }\n\n  doValidate(flags) {\n    const str = this.value;\n    const firstNonZero = str.search(/[^0]/);\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n    const [minstr, maxstr] = this.boundaries(str);\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to && super.doValidate(flags);\n  }\n\n}\n\nIMask.MaskedRange = MaskedRange;\nexport { MaskedRange as default };","map":{"version":3,"names":["IMask","MaskedPattern","MaskedRange","_matchFrom","maxLength","String","from","length","constructor","opts","updateOptions","_update","to","autofix","patternOpts","Math","max","fromStr","padStart","toStr","sameCharsCount","mask","slice","replace","repeat","isComplete","Boolean","value","boundaries","str","minstr","maxstr","placeholder","num","match","padEnd","doPrepareChar","ch","flags","details","nextVal","Number","aggregate","append","doValidate","firstNonZero","search","default"],"sources":["/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/node_modules/imask/esm/masked/range.js"],"sourcesContent":["import IMask from '../core/holder.js';\nimport MaskedPattern from './pattern.js';\nimport '../core/change-details.js';\nimport '../core/utils.js';\nimport './base.js';\nimport '../core/continuous-tail-details.js';\nimport './factory.js';\nimport './pattern/chunk-tail-details.js';\nimport './pattern/cursor.js';\nimport './pattern/fixed-definition.js';\nimport './pattern/input-definition.js';\nimport './regexp.js';\n\n/** Pattern which accepts ranges */\nclass MaskedRange extends MaskedPattern {\n  /**\n    Optionally sets max length of pattern.\n    Used when pattern length is longer then `to` param length. Pads zeros at start in this case.\n  */\n\n  /** Min bound */\n\n  /** Max bound */\n\n  /** */\n\n  get _matchFrom() {\n    return this.maxLength - String(this.from).length;\n  }\n  constructor(opts) {\n    super(opts); // mask will be created in _update\n  }\n\n  updateOptions(opts) {\n    super.updateOptions(opts);\n  }\n  _update(opts) {\n    const {\n      to = this.to || 0,\n      from = this.from || 0,\n      maxLength = this.maxLength || 0,\n      autofix = this.autofix,\n      ...patternOpts\n    } = opts;\n    this.to = to;\n    this.from = from;\n    this.maxLength = Math.max(String(to).length, maxLength);\n    this.autofix = autofix;\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n    let sameCharsCount = 0;\n    while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) ++sameCharsCount;\n    patternOpts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\\\0') + '0'.repeat(this.maxLength - sameCharsCount);\n    super._update(patternOpts);\n  }\n  get isComplete() {\n    return super.isComplete && Boolean(this.value);\n  }\n  boundaries(str) {\n    let minstr = '';\n    let maxstr = '';\n    const [, placeholder, num] = str.match(/^(\\D*)(\\d*)(\\D*)/) || [];\n    if (num) {\n      minstr = '0'.repeat(placeholder.length) + num;\n      maxstr = '9'.repeat(placeholder.length) + num;\n    }\n    minstr = minstr.padEnd(this.maxLength, '0');\n    maxstr = maxstr.padEnd(this.maxLength, '9');\n    return [minstr, maxstr];\n  }\n  doPrepareChar(ch, flags) {\n    if (flags === void 0) {\n      flags = {};\n    }\n    let details;\n    [ch, details] = super.doPrepareChar(ch.replace(/\\D/g, ''), flags);\n    if (!this.autofix || !ch) return [ch, details];\n    const fromStr = String(this.from).padStart(this.maxLength, '0');\n    const toStr = String(this.to).padStart(this.maxLength, '0');\n    const nextVal = this.value + ch;\n    if (nextVal.length > this.maxLength) return ['', details];\n    const [minstr, maxstr] = this.boundaries(nextVal);\n    if (Number(maxstr) < this.from) return [fromStr[nextVal.length - 1], details];\n    if (Number(minstr) > this.to) {\n      if (this.autofix === 'pad' && nextVal.length < this.maxLength) {\n        return ['', details.aggregate(this.append(fromStr[nextVal.length - 1] + ch, flags))];\n      }\n      return [toStr[nextVal.length - 1], details];\n    }\n    return [ch, details];\n  }\n  doValidate(flags) {\n    const str = this.value;\n    const firstNonZero = str.search(/[^0]/);\n    if (firstNonZero === -1 && str.length <= this._matchFrom) return true;\n    const [minstr, maxstr] = this.boundaries(str);\n    return this.from <= Number(maxstr) && Number(minstr) <= this.to && super.doValidate(flags);\n  }\n}\nIMask.MaskedRange = MaskedRange;\n\nexport { MaskedRange as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}