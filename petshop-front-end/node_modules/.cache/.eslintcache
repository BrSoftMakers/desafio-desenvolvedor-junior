[{"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/index.js":"1","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/App.js":"2","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/reportWebVitals.js":"3","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/routes.js":"4","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/LoginRoute/index.js":"5","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/PrivateRoute/index.js":"6","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/services/user.js":"7","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/CadastroForm/index.js":"8","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Seach/index.js":"9","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/EditarAnimal/index.js":"10","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/login/index.js":"11","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Input/index.js":"12","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/SeachAnimal/index..js":"13","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/services/pets.js":"14","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/services/correiosService.js":"15","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/Pet/cadastroAnimal/index.js":"16","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/Pet/Animal/index.js":"17","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/User/cadastro/index.js":"18","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/User/editar/index.js":"19","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Header/Header/index.js":"20","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Header/NavBar/index.js":"21","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Header/OpcoesHeader/index.js":"22","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Modals/SmallModal/index.js":"23","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Modals/EditPetModal/index.js":"24","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/img/Logo/index.js":"25","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/img/Icone/index.js":"26","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Header/IconesHeader/index.js":"27","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/EditarUser/index.js":"28","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Logout/index.js":"29","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/home/index.js":"30"},{"size":1059,"mtime":1663586936000,"results":"31","hashOfConfig":"32"},{"size":202,"mtime":1694091003955,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":1663586936000,"results":"34","hashOfConfig":"32"},{"size":3380,"mtime":1694649154939,"results":"35","hashOfConfig":"32"},{"size":656,"mtime":1693852304000,"results":"36","hashOfConfig":"32"},{"size":681,"mtime":1693852304000,"results":"37","hashOfConfig":"32"},{"size":3496,"mtime":1694646072843,"results":"38","hashOfConfig":"32"},{"size":412,"mtime":1693852304000,"results":"39","hashOfConfig":"32"},{"size":2558,"mtime":1694108545725,"results":"40","hashOfConfig":"32"},{"size":7624,"mtime":1694474603338,"results":"41","hashOfConfig":"32"},{"size":8134,"mtime":1694649196579,"results":"42","hashOfConfig":"32"},{"size":191,"mtime":1689360524000,"results":"43","hashOfConfig":"32"},{"size":2653,"mtime":1694310708675,"results":"44","hashOfConfig":"32"},{"size":3038,"mtime":1694215952090,"results":"45","hashOfConfig":"32"},{"size":772,"mtime":1689537450000,"results":"46","hashOfConfig":"32"},{"size":10933,"mtime":1694286558442,"results":"47","hashOfConfig":"32"},{"size":247,"mtime":1694286734602,"results":"48","hashOfConfig":"32"},{"size":17198,"mtime":1694311573425,"results":"49","hashOfConfig":"32"},{"size":4216,"mtime":1694566095673,"results":"50","hashOfConfig":"32"},{"size":2269,"mtime":1694568458983,"results":"51","hashOfConfig":"32"},{"size":688,"mtime":1694474910048,"results":"52","hashOfConfig":"32"},{"size":2185,"mtime":1694649312889,"results":"53","hashOfConfig":"32"},{"size":3534,"mtime":1694115688488,"results":"54","hashOfConfig":"32"},{"size":5596,"mtime":1694474411728,"results":"55","hashOfConfig":"32"},{"size":259,"mtime":1694475113698,"results":"56","hashOfConfig":"32"},{"size":549,"mtime":1694115138337,"results":"57","hashOfConfig":"32"},{"size":528,"mtime":1694475106558,"results":"58","hashOfConfig":"32"},{"size":15134,"mtime":1694566527923,"results":"59","hashOfConfig":"32"},{"size":545,"mtime":1694632503475,"results":"60","hashOfConfig":"32"},{"size":182,"mtime":1694649057749,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"1kmrxmr",{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"65"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"65"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/index.js",[],[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/App.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/reportWebVitals.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/routes.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/LoginRoute/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/PrivateRoute/index.js",["160","161"],[],"import Cookies from 'js-cookie';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Navigate, Route } from 'react-router-dom';\r\nimport Login from '../../pages/login';\r\n\r\nexport default function PrivateRoute({ component }) {\r\n    const [tokenExist, setTokenExist] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const checkAuthentication = async () => {\r\n            const token = Cookies.get('token');\r\n            if(!token) {\r\n                setTokenExist(false);\r\n            }\r\n        };\r\n\r\n        checkAuthentication();\r\n    }, []);\r\n\r\n    return(\r\n        <>\r\n            {(tokenExist) ? component : <Navigate replace to=\"/login\"/>} \r\n        </>\r\n    )\r\n}","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/services/user.js",["162","163"],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/CadastroForm/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Seach/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/EditarAnimal/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/login/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Input/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/SeachAnimal/index..js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/services/pets.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/services/correiosService.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/Pet/cadastroAnimal/index.js",["164","165"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { AppContainer, Header, FormContainer } from \"../../../components/CadastroForm\";\r\nimport { IMaskInput } from \"react-imask\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { postPet } from \"../../../services/pets\";\r\nimport { getUsers } from \"../../../services/user\";\r\n\r\nfunction CadastroAnimal() {\r\n    const navigate = useNavigate();\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n    const [users, setUsers] = useState([]);\r\n    const [selectedUserId, setSelectedUserId] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        async function fetchUsers() {\r\n            try {\r\n                const userList = await getUsers();\r\n                setUsers(userList);\r\n            } catch (error) {\r\n                console.error(\"Erro ao obter a lista de usuários:\", error);\r\n            }\r\n        }\r\n\r\n        fetchUsers();\r\n    }, []);\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        age: '',\r\n        type: '', // Campo de seleção para \"Cão\" ou \"Gato\"\r\n        breed: '',\r\n        ownerId: '',\r\n    });\r\n\r\n    const [formErrors, setFormErrors] = useState({\r\n        name: '',\r\n        age: '',\r\n        type: '',\r\n        breed: '',\r\n        ownerId: '',\r\n    });\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData({ ...formData, [name]: value });\r\n        // Limpe o erro relacionado a este campo quando o usuário começa a digitar novamente\r\n        setFormErrors({ ...formErrors, [name]: '' });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Realize suas validações manualmente aqui\r\n        const errors = {};\r\n\r\n        if (!formData.name) {\r\n            errors.name = \"Obrigatório\";\r\n        }\r\n\r\n        if (!formData.age) {\r\n            errors.age = \"Obrigatório\";\r\n        }\r\n\r\n        if (!formData.type) {\r\n            errors.type = \"Obrigatório\";\r\n        }\r\n\r\n        if (!formData.breed) {\r\n            errors.breed = \"Obrigatório\";\r\n        }\r\n\r\n        if (!selectedUserId) {\r\n            errors.ownerId = \"Obrigatório\";\r\n        }\r\n\r\n        setFormErrors(errors);\r\n\r\n        if (Object.keys(errors).length === 0) {\r\n            try {\r\n                const animalData = {\r\n                    name: formData.name,\r\n                    age: formData.age,\r\n                    type: formData.type,\r\n                    breed: formData.breed,\r\n                    ownerId: selectedUserId,\r\n                };\r\n\r\n                const response = await postPet(animalData);\r\n\r\n                if (response.success) {\r\n                    setMessage(response.message);\r\n                    navigate('/AnimalPage');\r\n                } else {\r\n                    setMessage(response.message);\r\n                    console.log(\"Erro ao cadastrar animal:\", response.message);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Erro ao cadastrar animal:\", error);\r\n                setMessage(\"Erro ao cadastrar animal. Por favor, tente novamente.\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"relative ml-[195px] -mt-[650px]\">\r\n            <AppContainer className=\"\">\r\n                <FormContainer className=\"mt-16 flex ml-12\">\r\n                    <div className=\"flex text-#0588D1\">\r\n                        <form onSubmit={handleSubmit} className=\"\">\r\n                            <div className=\"grid grid-flow-col mb-6 gap-5\">\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"name\" className=\"block text-sm font-medium\">\r\n                                        Nome do animal\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"name\"\r\n                                        name=\"name\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Digite o nome do animal\"\r\n                                        value={formData.name}\r\n                                        onChange={handleInputChange}\r\n                                        className=\"w-[30rem] focus:border-#0588D1 focus:border-[2.8px] focus:outline-none px-3 py-2 border border-gray-300 rounded-xl\"\r\n                                    />\r\n                                    {formErrors.name && <div className=\"text-sm text-red-500\">{formErrors.name}</div>}\r\n                                </div>\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"age\" className=\"block text-sm font-medium\">\r\n                                        Idade\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"age\"\r\n                                        name=\"age\"\r\n                                        type=\"number\"\r\n                                        placeholder=\"Digite a idade do animal\"\r\n                                        value={formData.age}\r\n                                        onChange={handleInputChange}\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    />\r\n                                    {formErrors.age && <div className=\"text-sm text-red-500\">{formErrors.age}</div>}\r\n                                </div>\r\n                                <div className=\"gap-10\">\r\n                                    <label htmlFor=\"type\" className=\"block text-sm font-medium\">\r\n                                        Tipo\r\n                                    </label>\r\n                                    <select\r\n                                        defaultValue=\"DEFAULT\"\r\n                                        id=\"type\"\r\n                                        name=\"type\"\r\n                                        value={formData.type}\r\n                                        onChange={handleInputChange}\r\n                                        className=\"w-48 px-3 py-2 border border-gray-300 rounded-xl  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    >\r\n                                        <option value=\"DEFAULT\" hidden>Selecionar</option>\r\n                                        <option value=\"dog\">Cachoro</option>\r\n                                        <option value=\"cat\">Gato</option>\r\n                                    </select>\r\n\r\n                                    {formErrors.type && <div className=\"text-sm text-red-500\">{formErrors.type}</div>}\r\n                                </div>\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"ownerId\" className=\"block text-sm font-medium\">\r\n                                        ID do dono\r\n                                    </label>\r\n                                    <select\r\n                                        defaultValue=\"DEFAULT\"\r\n                                        id=\"ownerId\"\r\n                                        name=\"ownerId\"\r\n                                        value={selectedUserId}\r\n                                        onChange={(e) => setSelectedUserId(e.target.value)}\r\n                                        className=\"w-48 px-3 py-2 border border-gray-300 rounded-xl  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    >\r\n                                        <option value=\"DEFAULT\" hidden>Selecionar</option>\r\n                                        {users.map((user) => (\r\n                                            <option key={user.id} value={user.id}>\r\n                                                {user.name}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n\r\n                                    {formErrors.ownerId && <div className=\"text-sm text-red-500\">{formErrors.ownerId}</div>}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"grid grid-flow-col mb-6 gap-2\">\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"breed\" className=\"block text-sm font-medium\">\r\n                                        Raça\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"breed\"\r\n                                        name=\"breed\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Digite a raça do animal\"\r\n                                        value={formData.breed}\r\n                                        onChange={handleInputChange}\r\n                                        className=\"w-[30rem] px-3 py-2 border border-gray-300 rounded-xl  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    />\r\n                                    {formErrors.breed && <div className=\"text-sm text-red-500\">{formErrors.breed}</div>}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"grid grid-flow-col mb-6 gap-5l place-items-end\">\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"w-36 px-3 py-2 bg-#0588D1 mt-8 p-2 text-white rounded-xl hover:bg-#border-#0588D1\"\r\n                                >\r\n                                    Cadastrar\r\n                                </button>\r\n                            </div>\r\n                            {message && (\r\n                                <p>\r\n                                    <svg className=\"w-6 h-6 text-red-500 dark:red-500\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 21\">\r\n                                        <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 3.464V1.1m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175C17 15.4 17 16 16.462 16H3.538C3 16 3 15.4 3 14.807c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 10 3.464ZM4 3 3 2M2 7H1m15-4 1-1m1 5h1M6.54 16a3.48 3.48 0 0 0 6.92 0H6.54Z\" />\r\n                                    </svg>\r\n                                    {message}\r\n                                </p>\r\n                            )}\r\n                        </form>\r\n                    </div>\r\n                </FormContainer>\r\n            </AppContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CadastroAnimal;","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/Pet/Animal/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/User/cadastro/index.js",["166","167"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { consultarEnderecoPorCep } from \"../../../services/correiosService\"; // Importe a função para consultar o endereço por CEP\r\nimport { postUsers } from \"../../../services/user\";\r\nimport { AppContainer, Header, FormContainer } from \"../../../components/CadastroForm\";\r\nimport { IMaskInput } from \"react-imask\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ShowPasswordImg from \"../../../img/ShowPasswordImg 1.png\";\r\nimport HidePasswordImg from \"../../../img/HidePasswordImg 1.png\";\r\n\r\nfunction Cadastro() {\r\n    const navigate = useNavigate();\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        cpf: '',\r\n        birthday: '',\r\n        phone: '',\r\n        email: '',\r\n        password: '',\r\n        isAdmin: '',\r\n        address: {\r\n            cep: '',\r\n            street: '',\r\n            city: '',\r\n            state: ''\r\n        }\r\n    });\r\n    const [formErrors, setFormErrors] = useState({\r\n        name: '',\r\n        cpf: '',\r\n        birthday: '',\r\n        phone: '',\r\n        email: '',\r\n        password: '',\r\n        isAdmin: '',\r\n        address: {\r\n            cep: '',\r\n            street: '',\r\n            city: '',\r\n            state: ''\r\n        }\r\n    });\r\n\r\n    const togglePasswordVisibility = () => {\r\n        setShowPassword((prevShowPassword) => !prevShowPassword);\r\n    };\r\n\r\n    const updateAddressFields = async (cep) => {\r\n        try {\r\n            const addressInfo = await consultarEnderecoPorCep(cep);\r\n\r\n            if (addressInfo.erro) {\r\n                console.error(\"CEP não encontrado.\");\r\n            } else {\r\n                setFormData((prevData) => ({\r\n                    ...prevData,\r\n                    address: {\r\n                        ...prevData.address,\r\n                        street: addressInfo.logradouro || \"\",\r\n                        city: addressInfo.localidade || \"\",\r\n                        state: addressInfo.uf || \"\"\r\n                    }\r\n                }));\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Erro ao consultar o CEP:\", error);\r\n        }\r\n    };\r\n\r\n    const handleCepChange = (e) => {\r\n        const cep = e.target.value;\r\n        setFormData((prevData) => ({ ...prevData, address: { ...prevData.address, cep } }));\r\n        updateAddressFields(cep);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Realize suas validações manualmente aqui\r\n        // Por exemplo, você pode verificar cada campo e definir erros no estado formErrors\r\n        const errors = {};\r\n\r\n        if (!formData.name) {\r\n            errors.name = \"Obrigatório\";\r\n        }\r\n\r\n        // Faça isso para todos os campos\r\n\r\n        setFormErrors(errors);\r\n\r\n        // Verifique se há erros\r\n        if (Object.keys(errors).length === 0) {\r\n            // Se não houver erros, prossiga com a submissão\r\n            try {\r\n                await postUsers(formData); // Suponha que esta função faça a chamada à API de postagem de usuário\r\n                setMessage(\"Usuário cadastrado com sucesso!\");\r\n                navigate('/Editar');\r\n            } catch (error) {\r\n                setMessage(\"Erro ao cadastrar o usuário. Por favor, tente novamente.\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"relative ml-[195px] -mt-[650px] \">\r\n            <AppContainer className=\"\">\r\n                <FormContainer className=\"mt-16 flex ml-12\">\r\n                    <div className=\"flex text-#0588D1 \">\r\n                        <form onSubmit={handleSubmit} className=\"\">\r\n                            <div className=\"grid grid-cols-3 gap-5 mb-6\">\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"name\" className=\"block text-sm font-medium\">\r\n                                        Nome\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"name\"\r\n                                        name=\"name\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Digite o seu nome completo\"\r\n                                        value={formData.name}\r\n                                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n                                        className=\"w-[20rem] focus:border-#0588D1 focus:border-[2.8px] focus:outline-none px-3 py-2 border border-gray-300 rounded-xl \"\r\n                                    />\r\n                                    {formErrors.name && <div className=\"text-sm\">{formErrors.name}</div>}\r\n                                </div>\r\n                                <div className=\"ml-5\">\r\n                                    <label htmlFor=\"birthday\" className=\"block text-sm font-medium\">\r\n                                        Data de Nascimento\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"birthday\"\r\n                                        name=\"birthday\"\r\n                                        type=\"date\"\r\n                                        placeholder=\"Digite a sua data de nascimento\"\r\n                                        value={formData.birthday}\r\n                                        onChange={(e) => setFormData({ ...formData, birthday: e.target.value })}\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl text-gray-400  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    />\r\n                                    {formErrors.birthday && <div className=\"text-sm\">{formErrors.birthday}</div>}\r\n                                </div>\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"phone\" className=\"block text-sm font-medium\">\r\n                                        Celular\r\n                                    </label>\r\n                                    <IMaskInput\r\n                                        id=\"phone\"\r\n                                        name=\"phone\"\r\n                                        type=\"text\"\r\n                                        mask=\"(00) 0 0000-0000\"\r\n                                        placeholder=\"Digite o seu telefone\"\r\n                                        value={formData.phone}\r\n                                        onAccept={(value) => setFormData({ ...formData, phone: value })}\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    />\r\n                                    {formErrors.phone && <div className=\"text-sm\">{formErrors.phone}</div>}\r\n                                </div>\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"email\" className=\"block text-sm font-medium\">\r\n                                        E-mail\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"email\"\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        placeholder=\"Digite o seu email\"\r\n                                        value={formData.email}\r\n                                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}\r\n                                        className=\"w-[20rem] px-3 py-2 border border-gray-300 rounded-xl  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    />\r\n                                    {formErrors.email && <div className=\"text-sm\">{formErrors.email}</div>}\r\n                                </div>\r\n                                <div className=\"ml-5\">\r\n                                    <label htmlFor=\"password\" className=\"block text-sm font-medium\">\r\n                                        Senha\r\n                                    </label>\r\n                                    <div className=\"relative\">\r\n                                        <input\r\n                                            id=\"password\"\r\n                                            name=\"password\"\r\n                                            type={showPassword ? 'text' : 'password'}\r\n                                            placeholder=\"********\"\r\n                                            value={formData.password}\r\n                                            onChange={(e) => setFormData({ ...formData, password: e.target.value })}\r\n                                            className=\"w-42 px-3 py-2 pr-12 border border-gray-300 rounded-xl  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                        />\r\n                                        <img\r\n                                            src={showPassword ? HidePasswordImg : ShowPasswordImg}\r\n                                            alt={showPassword ? \"Ocultar senha\" : \"Mostrar senha\"}\r\n                                            className=\"absolute right-2 top-1/3 transform mr-20 mt-2 -translate-y-1/2 cursor-pointer h-6\"\r\n                                            onClick={togglePasswordVisibility}\r\n                                        />\r\n                                    </div>\r\n                                    {formErrors.password && <div className=\"w-[310px] text-sm pl-2\">{formErrors.password}</div>}\r\n                                </div>\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"address.cep\" className=\"block text-sm font-medium\">\r\n                                        CEP\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"address.cep\"\r\n                                        name=\"address.cep\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Digite o CEP\"\r\n                                        value={formData.address.cep}\r\n                                        onChange={handleCepChange} // Adicione um manipulador de eventos onBlur para o campo CEP\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    />\r\n                                    {formErrors.address?.cep && <div className=\"text-sm\">{formErrors.address?.cep}</div>}\r\n                                </div>\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"address.street\" className=\"block text-sm font-medium\">\r\n                                        Rua\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"address.street\"\r\n                                        name=\"address.street\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Digite a Rua\"\r\n                                        value={formData.address.street}\r\n                                        onChange={(e) => setFormData({ ...formData, address: { ...formData.address, street: e.target.value } })}\r\n                                        className=\"w-[20rem] px-3 py-2 border border-gray-300 rounded-xl focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    />\r\n                                    {formErrors.address?.street && <div className=\"text-sm\">{formErrors.address?.street}</div>}\r\n                                </div>\r\n                                <div className=\"ml-5\">\r\n                                    <label htmlFor=\"address.city\" className=\"block text-sm font-medium\">\r\n                                        Cidade\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"address.city\"\r\n                                        name=\"address.city\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Digite a Cidade\"\r\n                                        value={formData.address.city}\r\n                                        onChange={(e) => setFormData({ ...formData, address: { ...formData.address, city: e.target.value } })}\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    />\r\n                                    {formErrors.address?.city && <div className=\"text-sm\">{formErrors.address?.city}</div>}\r\n                                </div>\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"address.state\" className=\"block text-sm font-medium\">\r\n                                        Estado\r\n                                    </label>\r\n                                    <input\r\n                                        id=\"address.state\"\r\n                                        name=\"address.state\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Digite o Estado\"\r\n                                        value={formData.address.state}\r\n                                        onChange={(e) => setFormData({ ...formData, address: { ...formData.address, state: e.target.value } })}\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    />\r\n                                    {formErrors.address?.state && <div className=\"text-sm\">{formErrors.address?.state}</div>}\r\n                                </div>\r\n                                <div className=\"\">\r\n                                    <label htmlFor=\"isAdmin\" className=\"block text-sm font-medium\">\r\n                                        Função\r\n                                    </label>\r\n                                    <select\r\n                                        defaultValue=\"DEFAULT\"\r\n                                        id=\"isAdmin\"\r\n                                        name=\"isAdmin\"\r\n                                        value={formData.isAdmin}\r\n                                        onChange={(e) => setFormData({ ...formData, isAdmin: e.target.value })}\r\n                                        className=\"w-64 px-1 py-2 border border-gray-300 rounded-xl text-gray-400  bg-white  focus:border-#0588D1 focus:border-[2.8px] focus:outline-none\"\r\n                                    >\r\n                                        <option value=\"DEFAULT\" hidden>Selecionar</option>\r\n                                        <option value=\"0\">Cliente</option>\r\n                                        <option value=\"1\">Gestor</option>\r\n                                    </select>\r\n                                    {formErrors.isAdmin && <div className=\"text-sm\">{formErrors.isAdmin}</div>}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flex justify-end mr-[7rem]\">\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    className=\"w-36 px-3 py-2 bg-#0588D1 mt-8 p-2 text-white rounded-xl hover:bg-#border-#0588D1\"\r\n                                >\r\n                                    Cadastrar\r\n                                </button>\r\n                            </div>\r\n                            {/* Exibe a mensagem de sucesso ou erro */}\r\n                            {message && <p>\r\n                                <svg className=\"w-6 h-6 text-red-500 dark:red-500\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 21\">\r\n                                    <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 3.464V1.1m0 2.365a5.338 5.338 0 0 1 5.133 5.368v1.8c0 2.386 1.867 2.982 1.867 4.175C17 15.4 17 16 16.462 16H3.538C3 16 3 15.4 3 14.807c0-1.193 1.867-1.789 1.867-4.175v-1.8A5.338 5.338 0 0 1 10 3.464ZM4 3 3 2M2 7H1m15-4 1-1m1 5h1M6.54 16a3.48 3.48 0 0 0 6.92 0H6.54Z\" />\r\n                                </svg>\r\n                                {message}</p>}\r\n                        </form>\r\n                    </div>\r\n                </FormContainer>\r\n            </AppContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cadastro;","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/User/editar/index.js",["168","169"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Suspense, lazy } from 'react';\r\nimport { getUsers, patchUsers, deleteUser } from '../../../services/user';\r\nimport Cookies from 'js-cookie';\r\nimport {format, parseISO} from \"date-fns\";\r\n\r\n//Importação lazy para UsersTable e UserModal\r\nconst UsersTable = lazy(() => import('../../../components/EditarUser').then(module => ({ default: module.UsersTable })));\r\nconst UserModal = lazy(() => import('../../../components/EditarUser').then(module => ({ default: module.UserModal })));\r\n\r\n\r\nfunction Editar() {\r\n    const [users, setUsers] = useState([]);\r\n    const [editingUser, setEditingUser] = useState(null);\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        birthday: '',\r\n    });\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [isUnauthorized, setIsUnauthorized] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const checkAuthentication = async () => {\r\n            const token = Cookies.get('token');\r\n            if (!token) {\r\n                setIsUnauthorized(true);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const dataUser = await getUsers();\r\n                setUsers(Array.isArray(dataUser) ? dataUser : []);\r\n            } catch (error) {\r\n                console.error('Ops! Ocorreu um erro:', error);\r\n            }\r\n        };\r\n\r\n        checkAuthentication();\r\n    }, []);\r\n\r\n    const handleEditUser = (user) => {\r\n        setEditingUser(user);\r\n        setFormData({\r\n            name: user.name,\r\n            email: user.email,\r\n            phone: user.phone,\r\n            birthday: user.birthday,\r\n        });\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleFormChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleCancelEdit = () => {\r\n        setEditingUser(null);\r\n        setFormData({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            birthday: '',\r\n        });\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const handleSaveEdit = async (values) => {\r\n        try {\r\n            const token = Cookies.get('token');\r\n            if (!token) {\r\n                setIsUnauthorized(true);\r\n                return;\r\n            }\r\n\r\n            await patchUsers(editingUser.id, values);\r\n\r\n            const updatedUsers = await getUsers();\r\n            setUsers(Array.isArray(updatedUsers) ? updatedUsers : []);\r\n            setEditingUser(null);\r\n            setFormData({}); // Reinicie o formData para limpar o formulário\r\n            setIsModalOpen(false);\r\n        } catch (error) {\r\n            console.error('Erro ao atualizar o usuário:', error);\r\n        }\r\n    };\r\n\r\n    const handleDeleteUser = async (user) => {\r\n        try {\r\n            await deleteUser(user.id);\r\n            const updatedUsers = await getUsers();\r\n            setUsers(Array.isArray(updatedUsers) ? updatedUsers : []);\r\n        } catch (error) {\r\n            console.error('Erro ao excluir o usuário:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {isUnauthorized ? (\r\n                <div className=\"flex items-center bg-red-100 p-4 rounded-md mb-4\">\r\n                    <p className=\"text-red-500\">Usuário não autorizado</p>\r\n                </div>\r\n            ) : (\r\n\r\n                <Suspense fallback={<p>Carregando...</p>}>\r\n                    <div className='h-full'>\r\n\r\n                            <UsersTable users={users} onEditUser={handleEditUser} onDeleteUser={handleDeleteUser} />\r\n\r\n                            <UserModal\r\n                                isOpen={isModalOpen}\r\n                                formData={formData}\r\n                                onChange={handleFormChange}\r\n                                onCancel={handleCancelEdit}\r\n                                onSave={handleSaveEdit}\r\n                            />\r\n                    </div>\r\n                </Suspense>\r\n            )}\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Editar;","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Header/Header/index.js",["170"],[],"import NavBar from \"../NavBar\"\nimport {getUser} from '../../../services/user';\nimport Cookies from 'js-cookie';\nimport {useEffect, useState} from \"react\";\nimport userImage from '../../../img/user_3177440.png';\n\nfunction Header({title}) {\n    const [user, setUser] = useState(null);\n\n    useEffect(() => {\n        fetchUserData();\n    }, []);\n\n    const fetchUserData = async () => {\n        try {\n            const userId = parseInt(Cookies.get('userId'));\n            // console.log('User ID:', userId); // Adicione esta linha para depuração\n            // Verifique se userId é um número válido antes de fazer a solicitação\n            if (!isNaN(userId)) {\n                const users = await getUser(userId);\n                setUser(users);\n                // console.log('Nome do usuário:', users.dataUser.name);\n            } else {\n                // console.error('ID do usuário não é um número válido.');\n            }\n        } catch (error) {\n            console.error('Erro ao obter os usuários:', error);\n        }\n    };\n    return (\n        <>\n            <div className=\"grid grid-cols-[13rem_auto] items-start h-full\">\n                <NavBar/>\n                <header className=\"bg-gray-200 flex justify-between h-20 p-0 3rem \">\n\n                    <div className=\"bg-gray-200 w-full h-20 flex items-center\">\n                        <h1 className=\"text-#0588D1 text-[35px] ml-3 font-medium\">{title}</h1>\n                    </div>\n                    <div className=\"flex items-center justify-center text-#0588D1 gap-6 text-[35px]\">\n                        {user ? (\n                            <>\n                                <h3>{user.dataUser.name}</h3>\n                                <span\n                                    className=\"flex justify-center w-9 h-9 ml-3 bg-white rounded-full border border-gray-300 overflow-hidden\">\n                                <img src={userImage} className=\"w-6.3 pt-0.1\" alt=\"Imagem do Usuário\"/>\n                            </span>\n                            </>\n                        ) : (\n                            <p>Carregando...</p>\n                        )}\n                    </div>\n\n                </header>\n            </div>\n        </>\n    )\n}\n\nexport default Header;","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Header/NavBar/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Header/OpcoesHeader/index.js",["171"],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Modals/SmallModal/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Modals/EditPetModal/index.js",["172"],[],"import React, { useState, useEffect } from 'react';\r\nimport { getPet, patchPet } from '../../../services/pets';\r\n\r\nfunction EditPetModal({ petId, onClose, onUpdatePetData }) {\r\n    // Estado para armazenar os dados do pet selecionado\r\n    const [petData, setPetData] = useState(null);\r\n\r\n    // Estado para armazenar os dados editados do pet\r\n    const [editedPetData, setEditedPetData] = useState({ pet: {} });\r\n\r\n    // UseEffect para buscar os dados do pet com base no petId\r\n    useEffect(() => {\r\n        async function fetchPetData() {\r\n            try {\r\n                const pet = await getPet(petId);\r\n                setPetData(pet);\r\n\r\n                // Verifica se os dados do pet possuem as propriedades corretas\r\n                if (pet && pet.pet && pet.pet.name && pet.pet.age && pet.pet.breed) {\r\n                    setEditedPetData({ pet: { ...pet.pet } });\r\n                }\r\n            } catch (error) {\r\n                console.error('Erro ao carregar os dados do pet:', error);\r\n            }\r\n        }\r\n\r\n        fetchPetData();\r\n    }, [petId]);\r\n\r\n    // Função para lidar com as mudanças nos campos de entrada\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setEditedPetData((prevState) => ({\r\n            pet: {\r\n                ...prevState.pet,\r\n                [name]: value,\r\n            },\r\n        }));\r\n    };\r\n\r\n    // Função para salvar as alterações no pet\r\n    const handleSave = async () => {\r\n        try {\r\n            // Chama a função para atualizar o pet com os dados editados\r\n            const updatedPet = await patchPet(petId, editedPetData.pet);\r\n\r\n            // Chama a função onUpdatePetData para notificar sobre a atualização\r\n            onUpdatePetData();\r\n\r\n            // Fecha o modal\r\n            onClose();\r\n        } catch (error) {\r\n            console.error('Erro ao salvar as alterações no pet:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"fixed top-0 left-0 w-full h-full flex justify-center items-center bg-gray-800 bg-opacity-70 z-50\">\r\n            <div className=\"bg-white p-6 rounded-lg shadow-lg w-96\">\r\n                <h2 className=\"text-2xl font-semibold mb-4\">Editar Pet</h2>\r\n                {petData && (\r\n                    <form>\r\n                        {/* Campo de Nome do Pet */}\r\n                        <div className=\"mb-4\">\r\n                            <label htmlFor=\"name\" className=\"block text-sm font-medium\">\r\n                                Nome do Pet\r\n                            </label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"name\"\r\n                                name=\"name\"\r\n                                value={editedPetData.pet.name}\r\n                                onChange={handleInputChange}\r\n                                className=\"w-full border-gray-300 rounded-md shadow-sm p-2\"\r\n                            />\r\n                        </div>\r\n\r\n                        {/* Campo de Idade do Pet */}\r\n                        <div className=\"mb-4\">\r\n                            <label htmlFor=\"age\" className=\"block text-sm font-medium\">\r\n                                Idade do Pet\r\n                            </label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"age\"\r\n                                name=\"age\"\r\n                                value={editedPetData.pet.age}\r\n                                onChange={handleInputChange}\r\n                                className=\"w-full border-gray-300 rounded-md shadow-sm p-2\"\r\n                            />\r\n                        </div>\r\n\r\n                        {/* Campo de Raça do Pet */}\r\n                        <div className=\"mb-4\">\r\n                            <label htmlFor=\"breed\" className=\"block text-sm font-medium\">\r\n                                Raça do Pet\r\n                            </label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"breed\"\r\n                                name=\"breed\"\r\n                                value={editedPetData.pet.breed}\r\n                                onChange={handleInputChange}\r\n                                className=\"w-full border-gray-300 rounded-md shadow-sm p-2\"\r\n                            />\r\n                        </div>\r\n\r\n                        {/* Botões de Salvar e Cancelar */}\r\n                        <div className=\"flex justify-end\">\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={handleSave}\r\n                                className=\"bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring focus:ring-blue-300\"\r\n                            >\r\n                                Salvar\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={onClose}\r\n                                className=\"ml-2 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 focus:outline-none focus:ring focus:ring-gray-300\"\r\n                            >\r\n                                Cancelar\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditPetModal;","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/img/Logo/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/img/Icone/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Header/IconesHeader/index.js",["173"],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/EditarUser/index.js",["174","175","176","177","178","179"],[],"import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport userImage from \"../../img/user_3177440.png\";\r\nimport {format, parseISO} from \"date-fns\";\r\nimport SmallModal from \"../Modals/SmallModal\";\r\nimport Seach from \"../../components/Seach/index\";\r\nimport {Formik, Form, Field, ErrorMessage} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {IMaskInput} from \"react-imask\";\r\n\r\nexport const EditButton = styled.button`\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  padding: 8px 12px;\r\n  cursor: pointer;\r\n  border-radius: 20px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nexport const ModalOverlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const ModalContent = styled.div`\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n`;\r\n\r\n\r\nexport const FormButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n  margin-right: 15px;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  margin-left: 10px;\r\n  padding: 8px 12px;\r\n  background-color: #4caf50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const UsersTable = ({users, onEditUser, onDeleteUser}) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [isModalOpen2, setIsModalOpen2] = useState(false);\r\n    const [isModalOpen3, setIsModalOpen3] = useState(false);\r\n\r\n    const [user, setUser] = useState({});\r\n\r\n    function handleModal(user) {\r\n        setUser(user);\r\n        setIsModalOpen(!isModalOpen);\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setIsModalOpen(false);\r\n    };\r\n\r\n    const openModal2 = () => {\r\n        setIsModalOpen2(true);\r\n    };\r\n\r\n    const closeModal2 = () => {\r\n        setIsModalOpen2(false);\r\n    };\r\n\r\n    const openModal3 = () => {\r\n        setIsModalOpen3(true);\r\n    };\r\n\r\n    const closeModal3 = () => {\r\n        setIsModalOpen3(false);\r\n        closeModal2();\r\n        closeModal();\r\n    };\r\n\r\n    const handleDelete = (user) => {\r\n        onDeleteUser(user);\r\n        openModal3();\r\n    };\r\n\r\n    const openModal = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleButton1Click = () => {\r\n        // Lógica a ser executada quando o botão 1 for clicado.\r\n        console.log(\"Botão 1 foi clicado\");\r\n    };\r\n\r\n    const handleButton2Click = () => {\r\n        // Lógica a ser executada quando o botão 2 for clicado.\r\n        console.log(\"Botão 2 foi clicado\");\r\n    };\r\n    return (\r\n        <div className=\"relative ml-[195px] -mt-[650px]\">\r\n            <section className=\"flex justify-between mx-8 mt-4 items-center\">\r\n                {/* Buscar */}\r\n                <Seach/>\r\n                <div className=\"flex items-center\">\r\n                    <a\r\n                        href=\"/cadastro\"\r\n                        className=\"w-50 px-3 py-2 bg-#0588D1 p-2 text-white rounded-xl hover:bg-blue-600 flex\"\r\n                    >\r\n                        <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            fill=\"none\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            strokeWidth={1.5}\r\n                            stroke=\"currentColor\"\r\n                            className=\"w-6 h-6\"\r\n                        >\r\n                            <path\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                                d=\"M12 4.5v15m7.5-7.5h-15\"\r\n                            />\r\n                        </svg>\r\n                        Cadastrar\r\n                    </a>\r\n                </div>\r\n            </section>\r\n\r\n            <table className=\"mx-8 mt-4 bg-gray-200 rounded-xl mb-10\">\r\n                <thead className=\"text-#0588D1\">\r\n                <tr className=\"\">\r\n                    <th className=\"py-2 auton\">Nome do usuário:</th>\r\n                    <th className=\"py-2 auton\">Telefone</th>\r\n                    <th className=\"py-2 auton\">Email</th>\r\n                    <th className=\"py-2 auton\">Nascimento</th>\r\n                    <th className=\"py-2 auton\">Cidade</th>\r\n                    <th className=\"py-2 auton\">Estado</th>\r\n                    <th className=\"py-2 auton\">Ação</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {users.map((user) => (\r\n                    <>\r\n                        <tr\r\n                            key={user.id}\r\n                            className=\"space-x-8 border-t-2 border-white text-gray-700\"\r\n                        >\r\n                            <td className=\"flex items-center my-2 ml-4 align-middle\">\r\n                  <span\r\n                      className=\"flex justify-center w-8 h-8 bg-white rounded-full border border-gray-300 overflow-hidden\">\r\n                    <img className=\"w-7\" src={userImage} alt=\"Imagem do Usuário\"/>\r\n                  </span>\r\n                                <span className=\"ml-2 mr-4\">{user.name}</span>\r\n                            </td>\r\n                            <td className=\"px-8 align-middle\">{user.phone}</td>\r\n                            <td className=\"px-8 align-middle\">{user.email}</td>\r\n                            <td className=\"px-8 align-middle\">\r\n                  <span className=\"flex bg-gray-400 text-white h-6 w-24 rounded-md justify-center\">\r\n                    {format(parseISO(user.birthday), \"dd/MM/yyyy\")}\r\n                  </span>\r\n                            </td>\r\n                            <td className=\"px-8 align-middle\">\r\n                                {user.addresses && user.addresses.length > 0 ? user.addresses[0].city : ''}\r\n                            </td>\r\n                            <td className=\"px-8 align-middle\">\r\n                                {user.addresses && user.addresses.length > 0 ? user.addresses[0].state : ''}\r\n                            </td>\r\n                            <td className=\"px-8 align-middle\">\r\n                                <button\r\n                                    onClick={() => handleModal(user)}\r\n                                    className=\"hover:bg-gray-400 rounded\"\r\n                                >\r\n                                    <svg\r\n                                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                                        fill=\"none\"\r\n                                        viewBox=\"0 0 24 24\"\r\n                                        strokeWidth={1.5}\r\n                                        stroke=\"currentColor\"\r\n                                        className=\"w-6 h-6\"\r\n                                    >\r\n                                        <path\r\n                                            strokeLinecap=\"round\"\r\n                                            strokeLinejoin=\"round\"\r\n                                            d=\"M6.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM12.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM18.75 12a.75.75 0 11-1.5 0 .75.75 0 011.5 0z\"\r\n                                        />\r\n                                    </svg>\r\n                                </button>\r\n                            </td>\r\n                        </tr>\r\n                    </>\r\n                ))}\r\n                </tbody>\r\n\r\n                <div>\r\n                    <SmallModal\r\n                        isModalOpen={isModalOpen}\r\n                        closeModal={closeModal}\r\n                        title=\"Ações\"\r\n                        button1=\"Editar usuário\"\r\n                        button2=\"Deletar usuário\"\r\n                        handleButtonClick1={() => onEditUser(user)}\r\n                        handleButtonClick2={openModal2}\r\n                        mode={2}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <SmallModal\r\n                        isModalOpen={isModalOpen2}\r\n                        closeModal={closeModal2}\r\n                        title=\"Deletar usuário\"\r\n                        description=\"Você tem certeza que deseja prosseguir com essa ação e deletar esse usuário ?\"\r\n                        button1=\"Cancelar\"\r\n                        button2=\"Deletar usuário\"\r\n                        handleButtonClick1={closeModal2}\r\n                        handleButtonClick2={() => handleDelete(user)}\r\n                        mode={2}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <SmallModal\r\n                        isModalOpen={isModalOpen3}\r\n                        closeModal={closeModal3}\r\n                        title=\"Usuário deletado com sucesso!\"\r\n                        button1=\"Ok\"\r\n                        handleButtonClick1={closeModal2}\r\n                        mode={1}\r\n                    />\r\n                </div>\r\n            </table>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nconst validationSchema = Yup.object().shape({\r\n    name: Yup.string().required(\"Obrigatório\"),\r\n\r\n    email: Yup.string()\r\n        .email(\"Email inválido\")\r\n        .matches(\r\n            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\r\n            \"Deve ser um endereço de email válido\"\r\n        )\r\n        .required(\"Obrigatório\"),\r\n\r\n    phone: Yup.string()\r\n        .matches(/^\\(\\d{2}\\) 9 \\d{4}-\\d{4}$/, \"Digite um número de celular válido\")\r\n        .required(\"Obrigatório\"),\r\n\r\n    birthday: Yup.date().required(\"Obrigatório\"),\r\n\r\n});\r\n\r\nexport const UserModal = ({isOpen, formData, onChange, onCancel, onSave}) => {\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const initialValues = {\r\n        name: formData.name,\r\n        email: formData.email,\r\n        phone: formData.phone,\r\n        birthday: formData.birthday,\r\n    };\r\n\r\n    const handleSaveEdit = async (values) => {\r\n        try {\r\n            // Lógica de envio do formulário\r\n            await onSave(values);\r\n            // Lógica de sucesso (pode redirecionar ou fazer outras ações)\r\n        } catch (error) {\r\n            if (error && error.response && error.response.status === 403 || error.response.status === 401) {\r\n                // Usuário não tem permissão para editar\r\n                setMessage(\"Você não tem permissão para editar os usuário.\");\r\n            } else {\r\n                // Outro erro de requisição\r\n                // Você pode adicionar um alerta ou mensagem personalizada aqui\r\n                console.error(error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isOpen && (\r\n                <ModalOverlay>\r\n                    <ModalContent>\r\n                        <Formik\r\n                            initialValues={initialValues}\r\n                            validationSchema={validationSchema}\r\n                            onSubmit={handleSaveEdit}\r\n                        >\r\n                            <Form>\r\n                                <div className=\"flex items-center mb-3\">\r\n                                    <label htmlFor=\"name\" className=\"text-black\">\r\n                                        Nome:\r\n                                    </label>\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        id=\"name\"\r\n                                        name=\"name\"\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl  focus:border-pink-700 focus:border-[2.8px] focus:outline-none ml-5\"\r\n                                    />\r\n                                    <ErrorMessage name=\"name\" component=\"div\"/>\r\n                                </div>\r\n                                <div className=\"flex items-center mb-3\">\r\n                                    <label htmlFor=\"email\" className=\"text-black\">\r\n                                        Email:\r\n                                    </label>\r\n                                    <Field\r\n                                        type=\"text\"\r\n                                        id=\"email\"\r\n                                        name=\"email\"\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl  focus:border-pink-700 focus:border-[2.8px] focus:outline-none ml-[22px]\"\r\n                                    />\r\n                                    <ErrorMessage\r\n                                        name=\"email\"\r\n                                        component=\"div\"\r\n                                        className=\"text-end\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"flex items-center mb-3\">\r\n                                    <label htmlFor=\"phone\" className=\"text-black\">\r\n                                        telefone:\r\n                                    </label>\r\n                                    <Field\r\n                                        as={IMaskInput}\r\n                                        mask=\"(00) 0 0000-0000\"\r\n                                        type=\"phone\"\r\n                                        id=\"phone\"\r\n                                        name=\"phone\"\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl  focus:border-pink-700 focus:border-[2.8px] focus:outline-none ml-[45px]\"\r\n                                    />\r\n                                    <ErrorMessage name=\"phone\" component=\"div\"/>\r\n                                </div>\r\n                                <div className=\"flex items-center mb-3\">\r\n                                    <label htmlFor=\"birthday\" className=\"text-black\">\r\n                                        Data:\r\n                                    </label>\r\n                                    <Field\r\n                                        type=\"date\"\r\n                                        id=\"birthday\"\r\n                                        name=\"birthday\"\r\n                                        className=\"w-42 px-3 py-2 border border-gray-300 rounded-xl  focus:border-pink-700 focus:border-[2.8px] focus:outline-none ml-[27px]\"\r\n                                    />\r\n                                    <ErrorMessage name=\"birthday\" component=\"div\"/>\r\n                                </div>\r\n\r\n                                <FormButtonContainer>\r\n                                    <FormButton type=\"button\" onClick={onCancel}>\r\n                                        Cancelar\r\n                                    </FormButton>\r\n                                    <FormButton type=\"submit\">Salvar</FormButton>\r\n                                </FormButtonContainer>\r\n                            </Form>\r\n                        </Formik>\r\n                    </ModalContent>\r\n                </ModalOverlay>\r\n            )}\r\n        </>\r\n    );\r\n};","/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/components/Logout/index.js",[],[],"/home/eduardo/Repositorios/desafio-junior-1/petshop-front-end/src/pages/home/index.js",["180"],[],{"ruleId":"181","severity":1,"message":"182","line":3,"column":20,"nodeType":"183","messageId":"184","endLine":3,"endColumn":25},{"ruleId":"181","severity":1,"message":"185","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":13},{"ruleId":"186","severity":1,"message":"187","line":77,"column":28,"nodeType":"188","messageId":"189","endLine":77,"endColumn":30},{"ruleId":"186","severity":1,"message":"187","line":77,"column":61,"nodeType":"188","messageId":"189","endLine":77,"endColumn":63},{"ruleId":"181","severity":1,"message":"190","line":2,"column":24,"nodeType":"183","messageId":"184","endLine":2,"endColumn":30},{"ruleId":"181","severity":1,"message":"191","line":3,"column":10,"nodeType":"183","messageId":"184","endLine":3,"endColumn":20},{"ruleId":"181","severity":1,"message":"192","line":1,"column":27,"nodeType":"183","messageId":"184","endLine":1,"endColumn":36},{"ruleId":"181","severity":1,"message":"190","line":4,"column":24,"nodeType":"183","messageId":"184","endLine":4,"endColumn":30},{"ruleId":"181","severity":1,"message":"193","line":5,"column":9,"nodeType":"183","messageId":"184","endLine":5,"endColumn":15},{"ruleId":"181","severity":1,"message":"194","line":5,"column":17,"nodeType":"183","messageId":"184","endLine":5,"endColumn":25},{"ruleId":"181","severity":1,"message":"195","line":4,"column":8,"nodeType":"183","messageId":"184","endLine":4,"endColumn":14},{"ruleId":"181","severity":1,"message":"196","line":6,"column":8,"nodeType":"183","messageId":"184","endLine":6,"endColumn":18},{"ruleId":"181","severity":1,"message":"197","line":45,"column":19,"nodeType":"183","messageId":"184","endLine":45,"endColumn":29},{"ruleId":"198","severity":2,"message":"199","line":7,"column":14,"nodeType":"183","messageId":"200","endLine":7,"endColumn":20},{"ruleId":"181","severity":1,"message":"201","line":97,"column":11,"nodeType":"183","messageId":"184","endLine":97,"endColumn":20},{"ruleId":"181","severity":1,"message":"202","line":101,"column":11,"nodeType":"183","messageId":"184","endLine":101,"endColumn":29},{"ruleId":"181","severity":1,"message":"203","line":106,"column":11,"nodeType":"183","messageId":"184","endLine":106,"endColumn":29},{"ruleId":"181","severity":1,"message":"204","line":266,"column":12,"nodeType":"183","messageId":"184","endLine":266,"endColumn":19},{"ruleId":"186","severity":1,"message":"187","line":281,"column":41,"nodeType":"188","messageId":"189","endLine":281,"endColumn":43},{"ruleId":"186","severity":1,"message":"187","line":281,"column":74,"nodeType":"188","messageId":"189","endLine":281,"endColumn":76},{"ruleId":"181","severity":1,"message":"205","line":2,"column":8,"nodeType":"183","messageId":"184","endLine":2,"endColumn":13},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Login' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'Header' is defined but never used.","'IMaskInput' is defined but never used.","'useEffect' is defined but never used.","'format' is defined but never used.","'parseISO' is defined but never used.","'bcrypt' is defined but never used.","'AnimalPage' is defined but never used.","'updatedPet' is assigned a value but never used.","no-undef","'icones' is not defined.","undef","'openModal' is assigned a value but never used.","'handleButton1Click' is assigned a value but never used.","'handleButton2Click' is assigned a value but never used.","'message' is assigned a value but never used.","'Seach' is defined but never used."]