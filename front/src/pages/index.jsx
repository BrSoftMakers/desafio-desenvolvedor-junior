import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import Swal from 'sweetalert2';

import Card from '../components/Card';
import { Main, Button, Div } from '../styles';
import api from '../service/api';
import { favorite, favout } from '../store/modules/fav/actions';
import { Modal } from '../components/Modal';
import Navbar from '../components/Navbar';

export default function Home() {
  const [pets, setPets] = useState([]);
  const [page, setPage] = useState(1);
  const [showModal, setShowModal] = useState(false);
  const [data, setData] = useState('');
  const [search, setSearch] = useState('');
  const [response, setResponse] = useState({ item: null });
  const [visible, setVisible] = useState(false);
  const fave = useSelector(state => state.fav);

  const router = useRouter();
  const dispatch = useDispatch();

  useEffect(() => {
    async function req() {
      await api.get(`/pets?limit=10&page=${page}`).then(data => {
        setPets(data.data.rows);
      });
    }
    req();
  }, []);

  // pesquisa
  async function handleSearch() {
    if (search === '') {
      return;
    }

    try {
      const { data } = await api.get(`/pets?name=${search}&limit=4&page=1`);
      if (data.rows.length > 0) {
        setResponse({ item: data.rows });
        setVisible(true);
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Nenhum resultado encontrado'
        });
      }
    } catch (error) {
      console.log(error);
    }
  }

  function setVisibleF() {
    setVisible(false);
  }

  // favoritar
  function setFav(item) {
    const img = item.img_url;
    const name = item.name;
    const specie = item.specie;
    const breed = item.breed;

    let match = fave.find(item => item.name === name);

    console.log(match);

    if (match === undefined) {
      dispatch(
        favorite({
          img,
          name,
          specie,
          breed
        })
      );
    }
  }

  // desfavoritar
  function removeFav(item) {
    dispatch(favout(item));
  }

  // deletar card
  function handleDeleteModal(id) {
    Swal.fire({
      title: 'Você tem certeza que deseja deletar o Pet?',
      text: 'Essa ação não pode ser desfeita!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Sim, apagar!',
      cancelButtonText: 'Cancelar'
    }).then(result => {
      if (result.isConfirmed) {
        api.delete(`pet/${id}`);

        Swal.fire({
          position: 'center',
          icon: 'success',
          title: 'Pet excluido com sucesso!',
          showConfirmButton: false,
          timer: 1500
        });
        setTimeout(() => window.location.reload(), 1500);
      }
    });
  }

  // ver o pet
  function openModal(pet) {
    setShowModal(true);
    setData(pet);
  }

  return (
    <div>
      <Head>
        <title>Home | PetLovers</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Modal showModal={showModal} setShowModal={setShowModal}>
        {data}
      </Modal>
      <Navbar
        home
        input={({ target }) => setSearch(target.value)}
        req={() => handleSearch(search)}
      />
      {response.item !== null ? (
        <Div style={{ display: `${visible ? 'block' : 'none'}` }}>
          <h3 style={{ marginLeft: '80px' }}>Foi encontrado:</h3>
          <Main>
            {response.item.map(pet => (
              <Card
                openModal={() => openModal(pet)}
                deletePet={() => handleDeleteModal(pet.id)}
                key={pet.id}
                img={pet.img_url}
                name={pet.name}
                specie={pet.specie}
                breed={pet.breed}
                owner={pet.owner}
                phone={pet.phone}
                setFav={() => setFav(pet)}
                removeFav={() => removeFav(pet)}
                edit={() => {
                  router.push(`update/${pet.id}`);
                }}
              />
            ))}
          </Main>
          <Button onClick={() => setVisibleF()}>Limpar</Button>
        </Div>
      ) : (
        ''
      )}
      <Main>
        {pets.map(pet => (
          <Card
            openModal={() => openModal(pet)}
            deletePet={() => handleDeleteModal(pet.id)}
            key={pet.id}
            img={pet.img_url}
            name={pet.name}
            specie={pet.specie}
            breed={pet.breed}
            owner={pet.owner}
            phone={pet.phone}
            setFav={() => setFav(pet)}
            removeFav={() => removeFav(pet)}
            edit={() => {
              router.push(`update/${pet.id}`);
            }}
          />
        ))}
      </Main>
    </div>
  );
}
